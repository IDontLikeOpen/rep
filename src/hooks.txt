import React, { useState, Fragment } from "react";
import { BrowserRouter as Router, Switch, Route } from "react-router-dom";
import Navbar from "./components/layouts/Navbar";
import Users from "./components/users/Users";
import User from "./components/users/User";
import axios from "axios";
import Search from "./components/users/Search";
import Alert from "./components/layouts/Alert";
import About from "./components/pages/About";
import "./App.css";

const App = () => {
  const [users, setUsers] = useState([]);
  const [user, setUser] = useState({});
  const [repos, setRepos] = useState([]);
  const [loading, setLoading] = useState(false);
  const [alert, setAlert] = useState(null);

  // state ={
  //   users: [],
  //   user: {},
  //   loading: false,
  //   alert: null,
  //   repos: []
  // }

  // async componentDidMount() {
  //   this.setState({ loading: true });

  //   const res = await axios.get(`url`)

  //   // when this is happening, the whole app is rerendered!
  //   this.setState({ users: res.data, loading: false })
  //   // console.log(res.data);
  // }

  // passing a function up??wow
  const searchUsers = async (text) => {
    // this.setState({ loading: true });
    setLoading(true);

    const res = await axios.get(
      `https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`
    );

    //why did we set it to items?
    // console.log(res.data);
    // this.setState({ users: res.data.items, loading: false })
    setUsers(res.data.items);
    setLoading(false);
  };

  // get a single user
  const getUser = async (username) => {
    setLoading(true);

    const res = await axios.get(
      `https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`
    );
    setUser(res.data);
    setLoading(false);
  };

  //  Get user reppos
  const getUserRepos = async (username) => {
    setLoading(true);

    const res = await axios.get(
      `https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`
    );
    setRepos(res.data);
    setLoading(false);
  };

  // Clear users from state
  const clearUsers = () => {
    setUsers([]);
    setLoading(false);
  };

  const showAlert = (msg, type) => {
    setAlert({ msg, type });
    setTimeout(() => setAlert(null), 3000);
  };

  return (
    <Router>
      <div className="App">
        <Navbar title="Github Finder" icon="fa fa-github" />
        <div className="container">
          <Alert alert={alert} />
          <Switch>
            {
              // rennder - a way to pass props for the route components
            }
            <Route
              exact
              path="/"
              render={(props) => (
                <Fragment>
                  <Search
                    searchUsers={searchUsers}
                    clearUsers={clearUsers}
                    // ternary comfy operators
                    showClear={users.length > 0 ? true : false}
                    setAlert={showAlert}
                  />
                  <Users loading={loading} users={users} />
                </Fragment>
              )}
            ></Route>
            <Route exact path="/about" component={About} />
            <Route
              exact
              path="/user/:login"
              render={(props) => (
                <User
                  {...props}
                  getUser={getUser}
                  getUserRepos={getUserRepos}
                  repos={repos}
                  loading={loading}
                  user={user}
                />
              )}
            />
          </Switch>
        </div>
      </div>
    </Router>
  );
};

export default App;

import React, {Fragment, useEffect } from "react";
import Spinner from '../layouts/Spinner'
import Repos from '../Repos/Repos'
import PropTypes from 'prop-types'
import {Link} from 'react-router-dom';
// import ReposItem from "../Repos/ReposItem";

// why did we created User as a class if its stateless
const User = ({user, loading,repos, getUser, getUserRepos, match }) => {
  useEffect(() => {
    getUser(match.params.login);
    getUserRepos(match.params.login);
    // eslint-disable-next-line
  }, [])
  // componentDidMount() {
  //   // give username back to app.js
  //   this.props.getUser(match.params.login);
  //   this.props.getUserRepos(match.params.login);
  // }

    const {
      name,
      avatar_url,
      location,
      bio,
      blog,
      login,
      company,
      html_url,
      followers,
      following,
      public_repos,
      public_gists,
      hireable,
    } = user;
    
    if(loading) return <Spinner />
    
    return (
      <Fragment>
        <Link to='/' className="btn btn-light">
          Back to Search
        </Link>
        Hireable: {' '}
        {
          hireable ? <i className="fa fa-check text-success"/> : <i className="fa fa-times-circle text-danger"/>
        }
        <div className="card grid-2">
          <div className="all-center">
            <img src={avatar_url} alt="" className="round-img" style={{width:'150px'}}/>
          <h1>{name}</h1>
          <p>Location: {location}</p>
          </div>
          <div>
            {bio && (
              <Fragment>
                <h3>Bio</h3>
                <p>{bio}</p>
              </Fragment>
            )}
            <a href={html_url} className="btn btn-dark my-1">Visit GitHub profile
            </a>
            <ul>
              <li>
                {login && (
                  <Fragment>
                    <strong>Username</strong> {login}
                  </Fragment>
                )}
              </li>
              <li>
                {company && (
                  <Fragment>
                    <strong>Company</strong> {company}
                  </Fragment>
                )}
              </li>
              <li>
                {blog && (
                  <Fragment>
                    <strong>Blog</strong> {blog}
                  </Fragment>
                )}
              </li>
            </ul>
          </div>
        </div>
        <div className="card text-center">
          <div className="badge badge-primary">
            Followers: {followers}
          </div>
          <div className="badge badge-success">
            Following: {following}
          </div>
          <div className="badge badge-light">
            Public Repos: {public_repos}
          </div>
          <div className="badge badge-dark">
            Public Gists: {public_gists}
          </div>
        </div>

        <Repos repos={repos} />
      </Fragment>
    );
  
}


User.propTypes ={
  loading:PropTypes.bool,
  user:PropTypes.object.isRequired,
  getUser: PropTypes.func.isRequired,
  getUserRepos:PropTypes.func.isRequired,
  // whyy..
  repos:PropTypes.array.isRequired
}

export default User;


import React, { useState } from 'react'
import PropTypes from 'prop-types'



const Search = ({ searchUsers, showClear, clearUsers, setAlert }) => {
  //  why settext? how many
  const [text, setText] = useState('');

  const onChange =(e)=>
    // getting value through target
    setText(e.target.value)
  
  const onSubmit =  (e) => {
    e.preventDefault();
    if (text === '') { setAlert('Please enter something', 'light') }
    // triggers rerender?
    searchUsers(text);
    setText('');
  }

    return (
      <div>
        <form onSubmit={onSubmit} className="form">
          <input 
            type="text" 
            name="text" 
            placeholder="Search Users..."
            value={text}
            onChange={onChange}
          />
          <input 
            type="submit" 
            value="Search" 
            className="btn btn-dark btn-block"
          />
        </form>
        {showClear && (
          <button 
            className="btn btn-light btn-block" 
            onClick={clearUsers} >Clear
          </button>
          )}
      </div>
    )
  
}

Search.propTypes = {
  searchUsers: PropTypes.func.isRequired,
  clearUsers: PropTypes.func.isRequired,
  showClear: PropTypes.bool.isRequired,
  setAlert:PropTypes.func.isRequired
}

export default Search